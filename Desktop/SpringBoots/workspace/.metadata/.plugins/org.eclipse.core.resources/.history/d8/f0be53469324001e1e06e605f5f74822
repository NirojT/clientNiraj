package Kanchanjunga.Controller;

import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import Kanchanjunga.Entity.Users;
import Kanchanjunga.JWT.JwtHelper;
import Kanchanjunga.JWT.JwtRequest;
import Kanchanjunga.JWT.JwtResponse;
import Kanchanjunga.Services.UsersService;
<<<<<<< HEAD

=======
>>>>>>> df0e30ccce9efd41c79413eff7dd860c9cc48426

@RestController
@RequestMapping("/api/user/")
public class AuthController {

	@Autowired
	private UserDetailsService userDetailsService;

	@Autowired
	private PasswordEncoder encoder;

	@Autowired
<<<<<<< HEAD
 private AuthenticationManager authenticationManager;
	
	@Autowired
	private JwtHelper jwtHelper;
	
    @Autowired
    private UsersService usersService;
    
    @Autowired
    private PasswordEncoder encoder;
	
=======
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtHelper jwtHelper;

	@Autowired
	private UsersService usersService;
>>>>>>> df0e30ccce9efd41c79413eff7dd860c9cc48426

	@PostMapping("login")
	public ResponseEntity<?> loginUser(@RequestBody JwtRequest jwtRequest) {

		doAuthenticate(jwtRequest.getName(), jwtRequest.getPassword());
		UserDetails userDetails = userDetailsService.loadUserByUsername(jwtRequest.getName());
		String token = this.jwtHelper.generateToken(jwtRequest.getName());

		JwtResponse jwtResponse = JwtResponse.builder().token(token).username(userDetails.getUsername()).build();
		return new ResponseEntity<>(jwtResponse, HttpStatus.OK);
	}

	public void doAuthenticate(String name, String password) {
		UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
				name, password);
		try {
			authenticationManager.authenticate(usernamePasswordAuthenticationToken);
		} catch (BadCredentialsException e) {
			throw new BadCredentialsException(" Invalid Username or Password  !!");

		}
	}

	@ExceptionHandler(BadCredentialsException.class)
	public String badCredentialEXcHandler() {
		return ("credential invalid");

	}
<<<<<<< HEAD
	 @PostMapping("register")
	    private ResponseEntity<?> createUser(@RequestBody Users user){
		user.setPassword( encoder.encode(user.getPassword()));
	     String createUser = usersService.createUser(user);
	    	return ResponseEntity.status(200).body(createUser);
	    	
	    	
	    } 
	
	
	
	
}
=======

	@PostMapping("register")
	private ResponseEntity<?> createUser(@RequestBody Users user) {
		user.setPassword(encoder.encode(user.getPassword()));
		String createUser = usersService.createUser(user);
		HashMap<String, Object> response = new HashMap<>();
		if (createUser.equalsIgnoreCase("exist")) {
			response.put("status", 200);
			response.put("message", "user already exist");
			return ResponseEntity.status(200).body(response);
		}
		if (createUser.equalsIgnoreCase("saved")) {
			response.put("status", 200);
			response.put("message", "user created successfully");
			return ResponseEntity.status(200).body(response);
		}
		response.put("status", 400);
		response.put("message", "user creation failed");
		return ResponseEntity.status(200).body(response);
	}

}
>>>>>>> df0e30ccce9efd41c79413eff7dd860c9cc48426
